// ChatBot.js - Tech Support for Elderly Users with Content Reporting
import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  StatusBar,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Keyboard,
  Animated,
  Dimensions,
  Alert,
  Share,
  Modal,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import auth from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';
import axios from 'axios';
import WebView from 'react-native-webview';
import TabBar from '../TabBar';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { UserPreferences } from '../UserPreferences';
import Header from '../Header';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

// Prompt template string for elderly tech support
const promptTemplateString = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ c√¥ng ngh·ªá d√†nh cho ng∆∞·ªùi cao tu·ªïi. B·∫°n c·∫ßn gi·∫£i th√≠ch m·ªçi th·ª© m·ªôt c√°ch ƒë∆°n gi·∫£n, r√µ r√†ng v√† ki√™n nh·∫´n. D∆∞·ªõi ƒë√¢y l√† ng·ªØ c·∫£nh t√†i li·ªáu b·∫°n c√≥ th·ªÉ tham kh·∫£o ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p:

{context}

C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: {question}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu, tr√°nh thu·∫≠t ng·ªØ k·ªπ thu·∫≠t ph·ª©c t·∫°p
- Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc m·ªôt c√°ch chi ti·∫øt v√† c·ª• th·ªÉ
- Ki√™n nh·∫´n v√† th√¢n thi·ªán trong c√°ch di·ªÖn ƒë·∫°t
- ƒê∆∞a ra v√≠ d·ª• th·ª±c t·∫ø g·∫ßn g≈©i v·ªõi cu·ªôc s·ªëng h√†ng ng√†y
- N·∫øu c·∫ßn d√πng thu·∫≠t ng·ªØ k·ªπ thu·∫≠t, h√£y gi·∫£i th√≠ch nghƒ©a c·ªßa n√≥
- Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng h·ªèi th√™m n·∫øu ch∆∞a hi·ªÉu r√µ
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn c√¥ng ngh·ªá th√¨ n√≥i: "T√¥i ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ c√¥ng ngh·ªá th√¥i ·∫°. B√°c c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ ƒëi·ªán tho·∫°i, m√°y t√≠nh, internet hay c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠ kh√°c."
- N·∫øu ng∆∞·ªùi d√πng ch√†o h·ªèi hay tr√≤ chuy·ªán th√¢n thi·ªán th√¨ v·∫´n tr·∫£ l·ªùi b√¨nh th∆∞·ªùng
- Lu√¥n ƒë·∫£m b·∫£o n·ªôi dung t√≠ch c·ª±c, h·ªØu √≠ch v√† ph√π h·ª£p v·ªõi m·ªçi l·ª©a tu·ªïi
- Kh√¥ng cung c·∫•p th√¥ng tin c√≥ th·ªÉ g√¢y h·∫°i ho·∫∑c kh√¥ng ph√π h·ª£p

Lu√¥n nh·ªõ r·∫±ng b·∫°n ƒëang h·ªó tr·ª£ nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ ch∆∞a quen thu·ªôc v·ªõi c√¥ng ngh·ªá, v√¨ v·∫≠y h√£y lu√¥n ki√™n nh·∫´n v√† chu ƒë√°o.
`;

const commonQuestions = [
  'L√†m sao ƒë·ªÉ g·ªçi video call v·ªõi con ch√°u?',
  'C√°ch s·ª≠ d·ª•ng Zalo ƒë·ªÉ nh·∫Øn tin an to√†n?',
  'H∆∞·ªõng d·∫´n ch·ª•p ·∫£nh v√† g·ª≠i ·∫£nh qua ƒëi·ªán tho·∫°i',
  'C√°ch t·∫£i v√† s·ª≠ d·ª•ng app ng√¢n h√†ng',
  'L√†m th·∫ø n√†o ƒë·ªÉ mua s·∫Øm online an to√†n?',
  'C√°ch b·∫£o v·ªá t√†i kho·∫£n kh·ªèi l·ª´a ƒë·∫£o online',
];

// Danh s√°ch l√Ω do b√°o c√°o
const reportReasons = [
  { id: 'inappropriate', label: 'N·ªôi dung kh√¥ng ph√π h·ª£p', icon: '‚ö†Ô∏è' },
  { id: 'offensive', label: 'N·ªôi dung x√∫c ph·∫°m', icon: 'üò°' },
  { id: 'misinformation', label: 'Th√¥ng tin sai l·ªách', icon: '‚ùå' },
  { id: 'spam', label: 'Tin r√°c/Spam', icon: 'üö´' },
  { id: 'harmful', label: 'N·ªôi dung c√≥ h·∫°i', icon: '‚ò¢Ô∏è' },
  { id: 'other', label: 'L√Ω do kh√°c', icon: 'üìù' },
];

const ChatBot = () => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [isSending, setIsSending] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [keyboardVisible, setKeyboardVisible] = useState(false);
  const [user, setUser] = useState(null);
  const [suggestionVisible, setSuggestionVisible] = useState(true);
  const [isVoiceModalVisible, setIsVoiceModalVisible] = useState(false);
  
  // Tr·∫°ng th√°i cho t√≠nh nƒÉng b√°o c√°o
  const [isReportModalVisible, setIsReportModalVisible] = useState(false);
  const [reportingMessage, setReportingMessage] = useState(null);
  const [selectedReportReason, setSelectedReportReason] = useState('');
  const [reportDetails, setReportDetails] = useState('');
  const [isSubmittingReport, setIsSubmittingReport] = useState(false);

  const GEMINI_API_KEY = 'AIzaSyD7Xqg9tpOaFZk11WSDoivTOBUmZG86gHE';

  const scrollViewRef = useRef(null);
  const textInputRef = useRef(null);
  const webViewRef = useRef(null);
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const typingDotsAnim = useRef(new Animated.Value(0)).current;

  const navigation = useNavigation();
  const { currentFontSize, getScaledSize } = UserPreferences();

  useEffect(() => {
    initializeChat();
    setupAnimations();
    setupKeyboardListeners();
    const unsub = auth().onAuthStateChanged(setUser);
    return () => unsub();
  }, []);

  const initializeChat = () => {
    const welcome = {
      id: Date.now(),
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω EasyTech, chuy√™n gi√∫p ƒë·ª° c√°c b√°c, c√¥, ch√∫ gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ c√¥ng ngh·ªá. B√°c c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°ch s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i, m√°y t√≠nh, internet hay b·∫•t k·ª≥ thi·∫øt b·ªã ƒëi·ªán t·ª≠ n√†o. T√¥i s·∫Ω gi·∫£i th√≠ch th·∫≠t ƒë∆°n gi·∫£n v√† chi ti·∫øt ·∫°!\n\nüí° L∆∞u √Ω: N·∫øu b·∫°n th·∫•y c√≥ c√¢u tr·∫£ l·ªùi n√†o kh√¥ng ph√π h·ª£p, h√£y nh·∫•n v√†o n√∫t "B√°o c√°o" ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•.',
      isUser: false,
      timestamp: new Date(),
      type: 'welcome',
    };
    setMessages([welcome]);
  };

  const setupAnimations = () => {
    Animated.parallel([
      Animated.timing(fadeAnim, { toValue: 1, duration: 800, useNativeDriver: true }),
      Animated.timing(slideAnim, { toValue: 0, duration: 600, useNativeDriver: true }),
    ]).start();
    Animated.loop(
      Animated.sequence([
        Animated.timing(typingDotsAnim, { toValue: 1, duration: 600, useNativeDriver: true }),
        Animated.timing(typingDotsAnim, { toValue: 0, duration: 600, useNativeDriver: true }),
      ])
    ).start();
  };

  const setupKeyboardListeners = () => {
    const show = Keyboard.addListener('keyboardDidShow', () => {
      setKeyboardVisible(true);
      setTimeout(scrollToBottom, 100);
    });
    const hide = Keyboard.addListener('keyboardDidHide', () => setKeyboardVisible(false));
    return () => {
      show.remove();
      hide.remove();
    };
  };

  const scrollToBottom = () => {
    scrollViewRef.current?.scrollToEnd({ animated: true });
  };

  const callGeminiAPI = async (userMessage) => {
    const context = ''; // TODO: load actual context from your DB/vector DB
    const prompt = promptTemplateString
      .replace('{context}', context)
      .replace('{question}', userMessage);

    try {
      const response = await axios.post(
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
        { contents: [{ parts: [{ text: prompt }] }] },
        {
          params: { key: GEMINI_API_KEY },
          headers: { 'Content-Type': 'application/json' },
        }
      );
      return response.data.candidates[0].content.parts[0].text.trim();
    } catch (err) {
      console.error('Error calling Gemini:', err.response?.data || err.message);
      return 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. B√°c th·ª≠ h·ªèi l·∫°i nh√©!';
    }
  };

  const handleSendMessage = async () => {
    if (!message.trim() || isSending) return;
    const text = message.trim();
    setMessage('');
    setIsSending(true);
    setSuggestionVisible(false);

    const userMsg = { id: Date.now(), text, isUser: true, timestamp: new Date() };
    setMessages((m) => [...m, userMsg]);
    setIsTyping(true);

    if (user) {
      firestore()
        .collection('users')
        .doc(user.uid)
        .update({
          assistantQuestions: firestore.FieldValue.increment(1),
          lastChatDate: firestore.FieldValue.serverTimestamp(),
        })
        .catch(console.error);
    }

    setTimeout(async () => {
      const reply = await callGeminiAPI(text);
      const botMsg = { 
        id: Date.now() + 1, 
        text: reply, 
        isUser: false, 
        timestamp: new Date(),
        isAIGenerated: true // ƒê√°nh d·∫•u tin nh·∫Øn ƒë∆∞·ª£c t·∫°o b·ªüi AI
      };
      setIsTyping(false);
      setMessages((m) => [...m, botMsg]);
      setIsSending(false);
    }, 1500 + Math.random() * 1000);
  };

  // H√†m helper ƒë·ªÉ reset t·∫•t c·∫£ state b√°o c√°o
  const resetReportState = () => {
    setSelectedReportReason('');
    setReportDetails('');
    setReportingMessage(null);
    setIsSubmittingReport(false);
  };

  // H√†m x·ª≠ l√Ω b√°o c√°o n·ªôi dung
  const handleReportContent = (message) => {
    setReportingMessage(message);
    setIsReportModalVisible(true);
    setSelectedReportReason('');
    setReportDetails('');
  };

  // H√†m ƒë√≥ng modal b√°o c√°o
  const closeReportModal = () => {
    setIsReportModalVisible(false);
    resetReportState();
  };

  const submitReport = async () => {
    if (!selectedReportReason || !reportingMessage) {
      Alert.alert('Th√¥ng b√°o', 'Vui l√≤ng ch·ªçn l√Ω do b√°o c√°o');
      return;
    }

    setIsSubmittingReport(true);

    try {
      const reportData = {
        messageId: reportingMessage.id,
        messageText: reportingMessage.text,
        reportReason: selectedReportReason,
        reportDetails: reportDetails.trim(),
        reportedBy: user?.uid || 'anonymous',
        reportedAt: firestore.FieldValue.serverTimestamp(),
        status: 'pending', // pending, reviewed, resolved
        userEmail: user?.email || null,
      };

      // L∆∞u b√°o c√°o v√†o Firestore
      await firestore()
        .collection('contentReports')
        .add(reportData);

      // C·∫≠p nh·∫≠t th·ªëng k√™ b√°o c√°o cho tin nh·∫Øn
      await firestore()
        .collection('messageReports')
        .doc(reportingMessage.id.toString())
        .set({
          messageId: reportingMessage.id,
          messageText: reportingMessage.text,
          reportCount: firestore.FieldValue.increment(1),
          lastReportedAt: firestore.FieldValue.serverTimestamp(),
        }, { merge: true });

      // ƒê√≥ng modal v√† reset state
      setIsReportModalVisible(false);
      resetReportState();

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng sau khi ƒë√≥ng modal
      setTimeout(() => {
        Alert.alert(
          'C·∫£m ∆°n b·∫°n!', 
          'B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω xem x√©t v√† c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª•.'
        );
      }, 200);

    } catch (error) {
      console.error('Error submitting report:', error);
      setIsSubmittingReport(false);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  const formatTime = (date) =>
    date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

  const TypingIndicator = () => (
    <Animated.View style={[styles.messageBubble, styles.botMessage, styles.typingBubble]}>
      <View style={styles.typingContainer}>
        <Animated.View style={[styles.typingDots, { opacity: typingDotsAnim }]}>
          <View style={[styles.typingDot, styles.dot1]} />
          <View style={[styles.typingDot, styles.dot2]} />
          <View style={[styles.typingDot, styles.dot3]} />
        </Animated.View>
        <Text style={[styles.typingText, { fontSize: getScaledSize(14) }]}>
          ƒêang suy nghƒ©...
        </Text>
      </View>
    </Animated.View>
  );

  const MessageBubble = ({ msg, index }) => {
    const anim = useRef(new Animated.Value(0)).current;
    useEffect(() => {
      Animated.timing(anim, {
        toValue: 1,
        duration: 300,
        delay: index * 50,
        useNativeDriver: true,
      }).start();
    }, []);

    return (
      <Animated.View
        style={[
          styles.messageBubble,
          msg.isUser ? styles.userMessage : styles.botMessage,
          {
            opacity: anim,
            transform: [
              { translateY: anim.interpolate({ inputRange: [0, 1], outputRange: [20, 0] }) },
            ],
          },
        ]}
      >
        <TouchableOpacity
          onLongPress={() =>
            Share.share({ message: msg.isUser ? msg.text : `Tr·ª£ l√Ω: ${msg.text}` })
          }
          activeOpacity={0.8}
        >
          <Text
            style={{
              fontSize: currentFontSize,
              color: msg.isUser ? '#fff' : '#333',
              lineHeight: currentFontSize * 1.5,
            }}
          >
            {msg.text}
          </Text>
          
          <View style={styles.messageFooter}>
            <Text
              style={{
                fontSize: getScaledSize(12),
                opacity: 0.6,
                color: msg.isUser ? '#ffffff90' : '#66666690',
              }}
            >
              {formatTime(msg.timestamp)}
            </Text>
            
            {/* N√∫t b√°o c√°o ch·ªâ hi·ªÉn th·ªã cho tin nh·∫Øn t·ª´ AI */}
            {msg.isAIGenerated && !msg.isUser && (
              <TouchableOpacity
                style={styles.reportButton}
                onPress={() => handleReportContent(msg)}
                hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
              >
                <Ionicons name="flag-outline" size={getScaledSize(14)} color="#ff6b6b" />
                <Text style={styles.reportButtonText}>B√°o c√°o</Text>
              </TouchableOpacity>
            )}
          </View>
        </TouchableOpacity>
      </Animated.View>
    );
  };

  const SuggestionChips = () =>
    suggestionVisible && (
      <Animated.View style={[styles.suggestionsContainer, { opacity: fadeAnim }]}>
        <Text style={{ fontSize: getScaledSize(16), fontWeight: 'bold', marginBottom: 8, color: '#333' }}>
          üí° C√¢u h·ªèi th∆∞·ªùng g·∫∑p:
        </Text>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {commonQuestions.map((q, i) => (
            <TouchableOpacity
              key={i}
              style={styles.suggestionChip}
              onPress={() => {
                setMessage(q);
                textInputRef.current?.focus();
              }}
            >
              <Text style={{ fontSize: getScaledSize(13), color: '#1976d2', textAlign: 'center' }}>{q}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </Animated.View>
    );

  const handleVoiceInput = () => setIsVoiceModalVisible(true);

  const onWebViewMessage = (event) => {
    try {
      const data = JSON.parse(event.nativeEvent.data);
      if (data.type === 'speechResult') {
        setMessage(data.text);
        setIsVoiceModalVisible(false);
        textInputRef.current?.focus();
      } else {
        Alert.alert('L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i', data.message || 'Vui l√≤ng th·ª≠ l·∫°i.');
        setIsVoiceModalVisible(false);
      }
    } catch (e) {
      console.warn(e);
    }
  };

  const speechRecognitionHtml = `
    <!DOCTYPE html>
    <html><body>
      <script>
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SpeechRecognition) {
          window.ReactNativeWebView.postMessage(JSON.stringify({ type:'error', message:'Kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i.' }));
        } else {
          const rec = new SpeechRecognition();
          rec.lang='vi-VN'; rec.interimResults=false; rec.maxAlternatives=1;
          rec.onresult = e => window.ReactNativeWebView.postMessage(JSON.stringify({ type:'speechResult', text:e.results[0][0].transcript }));
          rec.onerror = e => window.ReactNativeWebView.postMessage(JSON.stringify({ type:'error', message:e.error }));
          rec.start();
        }
      </script>
    </body></html>
  `;

  // Modal b√°o c√°o n·ªôi dung
  const ReportModal = () => (
    <Modal
      visible={isReportModalVisible}
      transparent
      animationType="slide"
      onRequestClose={closeReportModal}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.reportModalContent}>
          <View style={styles.reportModalHeader}>
            <Text style={styles.reportModalTitle}>B√°o c√°o n·ªôi dung kh√¥ng ph√π h·ª£p</Text>
            <TouchableOpacity
              onPress={closeReportModal}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color="#666" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.reportModalBody}>
            <Text style={styles.reportSectionTitle}>Tin nh·∫Øn ƒë∆∞·ª£c b√°o c√°o:</Text>
            <View style={styles.reportedMessageContainer}>
              <Text style={styles.reportedMessageText}>
                {reportingMessage?.text}
              </Text>
            </View>

            <Text style={styles.reportSectionTitle}>Ch·ªçn l√Ω do b√°o c√°o:</Text>
            {reportReasons.map((reason) => (
              <TouchableOpacity
                key={reason.id}
                style={[
                  styles.reportReasonItem,
                  selectedReportReason === reason.id && styles.selectedReportReason
                ]}
                onPress={() => setSelectedReportReason(reason.id)}
              >
                <Text style={styles.reportReasonIcon}>{reason.icon}</Text>
                <Text style={styles.reportReasonLabel}>{reason.label}</Text>
                {selectedReportReason === reason.id && (
                  <Ionicons name="checkmark-circle" size={20} color="#00cc66" />
                )}
              </TouchableOpacity>
            ))}

            <Text style={styles.reportSectionTitle}>Chi ti·∫øt b·ªï sung (tu·ª≥ ch·ªçn):</Text>
            <TextInput
              style={styles.reportDetailsInput}
              placeholder="M√¥ t·∫£ th√™m v·ªÅ v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i..."
              value={reportDetails}
              onChangeText={setReportDetails}
              multiline
              maxLength={500}
              textAlignVertical="top"
            />
            <Text style={styles.characterCount}>{reportDetails.length}/500</Text>
          </ScrollView>

          <View style={styles.reportModalFooter}>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={closeReportModal}
            >
              <Text style={styles.cancelButtonText}>Hu·ª∑</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[
                styles.submitButton,
                !selectedReportReason && styles.disabledSubmitButton
              ]}
              onPress={submitReport}
              disabled={!selectedReportReason || isSubmittingReport}
            >
              {isSubmittingReport ? (
                <ActivityIndicator size="small" color="#fff" />
              ) : (
                <Text style={styles.submitButtonText}>G·ª≠i b√°o c√°o</Text>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar backgroundColor="#007a4d" barStyle="light-content" />
      <Header showBackButton={false} />
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
        style={styles.keyboardAvoid}
      >
        <ScrollView
          ref={scrollViewRef}
          contentContainerStyle={styles.scrollViewContent}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={scrollToBottom}
        >
          <Animated.View
            style={[
              styles.assistantBanner,
              { opacity: fadeAnim, transform: [{ translateY: slideAnim }] },
            ]}
          >
            <View style={styles.robotIconContainer}>
              <Text style={styles.robotIconText}>üë¥</Text>
              <View style={styles.onlineIndicator} />
            </View>
            <View style={styles.bannerTextContainer}>
              <Text style={{ fontSize: getScaledSize(18), fontWeight: 'bold', color: '#fff' }}>
                Tr·ª£ l√Ω C√¥ng ngh·ªá EasyTech
              </Text>
              <Text style={{ fontSize: getScaledSize(14), color: '#fff', opacity: 0.9 }}>
                H·ªó tr·ª£ c√¥ng ngh·ªá cho ng∆∞·ªùi cao tu·ªïi
              </Text>
            </View>
          </Animated.View>

          <SuggestionChips />
          {messages.map((msg, idx) => (
            <MessageBubble key={msg.id} msg={msg} index={idx} />
          ))}
          {isTyping && <TypingIndicator />}
          <View style={{ height: 20 }} />
        </ScrollView>

        <View style={styles.inputContainer}>
          <View style={styles.inputWrapper}>
            <View style={styles.textInputContainer}>
              <TextInput
                ref={textInputRef}
                style={{
                  fontSize: currentFontSize,
                  borderWidth: 1,
                  borderColor: '#e5e7eb',
                  borderRadius: 24,
                  paddingHorizontal: 20,
                  paddingVertical: 12,
                  backgroundColor: '#f9fafb',
                  maxHeight: 120,
                  paddingRight: 50,
                  color: '#1f2937',
                }}
                placeholder="H·ªèi t√¥i v·ªÅ c√¥ng ngh·ªá..."
                placeholderTextColor="#999"
                value={message}
                onChangeText={setMessage}
                multiline
                maxLength={500}
                onFocus={() => {
                  setSuggestionVisible(false);
                  setTimeout(scrollToBottom, 300);
                }}
              />
              <TouchableOpacity style={styles.micButton} onPress={handleVoiceInput}>
                <Ionicons name="mic-outline" size={getScaledSize(22)} color="#00cc66" />
              </TouchableOpacity>
            </View>
            {message.length > 0 && (
              <Text
                style={{
                  fontSize: getScaledSize(12),
                  color: '#9ca3af',
                  textAlign: 'right',
                  marginTop: 4,
                }}
              >
                {message.length}/500
              </Text>
            )}
          </View>
          <TouchableOpacity
            style={[
              styles.sendButton,
              (!message.trim() || isSending) && styles.disabledButton,
            ]}
            onPress={handleSendMessage}
            disabled={!message.trim() || isSending}
          >
            {isSending ? (
              <ActivityIndicator size="small" color="#fff" />
            ) : (
              <Ionicons name="send" size={getScaledSize(20)} color="#fff" />
            )}
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {/* Modal nh·∫≠n di·ªán gi·ªçng n√≥i */}
      <Modal
        visible={isVoiceModalVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setIsVoiceModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>ƒêang l·∫Øng nghe...</Text>
            <ActivityIndicator size="large" color="#00cc66" />
            <TouchableOpacity
              style={styles.modalCloseButton}
              onPress={() => setIsVoiceModalVisible(false)}
            >
              <Text style={styles.modalCloseButtonText}>H·ªßy</Text>
            </TouchableOpacity>
            <WebView
              ref={webViewRef}
              source={{ html: speechRecognitionHtml }}
              style={styles.webView}
              onMessage={onWebViewMessage}
              javaScriptEnabled
              domStorageEnabled
              originWhitelist={['*']}
            />
          </View>
        </View>
      </Modal>

      {/* Modal b√°o c√°o n·ªôi dung */}
      <ReportModal />

      {!keyboardVisible && <TabBar onTabPress={(t) => navigation.navigate(t)} selectedTab="ChatBot" />}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f8f9fa' },
  keyboardAvoid: { flex: 1 },
  scrollViewContent: { paddingBottom: 20 },
  assistantBanner: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#6366f1',
    borderRadius: 20,
    padding: 20,
    margin: 20,
    elevation: 4,
    shadowColor: '#6366f1',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  robotIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
    position: 'relative',
  },
  robotIconText: { fontSize: 32 },
  onlineIndicator: {
    position: 'absolute',
    bottom: 2,
    right: 2,
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#10b981',
    borderWidth: 2,
    borderColor: '#fff',
  },
  bannerTextContainer: { flex: 1 },
  suggestionsContainer: { marginHorizontal: 20, marginBottom: 10 },
  suggestionChip: {
    backgroundColor: '#e3f2fd',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#bbdefb',
    minWidth: 120,
  },
  messageBubble: {
    borderRadius: 20,
    padding: 16,
    marginHorizontal: 20,
    marginTop: 12,
    maxWidth: SCREEN_WIDTH * 0.8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  botMessage: { backgroundColor: '#fff', alignSelf: 'flex-start', borderColor: '#e5e7eb', borderWidth: 1 },
  userMessage: { backgroundColor: '#00cc66', alignSelf: 'flex-end' },
  typingBubble: { backgroundColor: '#f3f4f6' },
  typingContainer: { flexDirection: 'row', alignItems: 'center' },
  typingDots: { flexDirection: 'row', marginRight: 8 },
  typingDot: { width: 8, height: 8, borderRadius: 4, backgroundColor: '#9ca3af', marginRight: 4 },
  dot1: {}, dot2: {}, dot3: {},
  typingText: { fontStyle: 'italic' },
  
  // Styles cho footer c·ªßa tin nh·∫Øn
  messageFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 4,
  },
  reportButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    backgroundColor: 'rgba(255, 107, 107, 0.1)',
  },
  reportButtonText: {
    fontSize: 12,
    color: '#ff6b6b',
    marginLeft: 4,
    fontWeight: '500',
  },

  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingHorizontal: 20,
    paddingVertical: 12,
    marginBottom: 90,
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  inputWrapper: { flex: 1, marginRight: 12 },
  textInputContainer: { position: 'relative' },
  micButton: { position: 'absolute', right: 10, top: '50%', transform: [{ translateY: -11 }], padding: 4 },
  sendButton: {
    width: 48, height: 48, borderRadius: 24, backgroundColor: '#00cc66', justifyContent: 'center', alignItems: 'center',
  },
  disabledButton: { backgroundColor: '#d1d5db' },

  // Styles cho modal b√°o c√°o
  modalOverlay: { 
    flex: 1, 
    backgroundColor: 'rgba(0,0,0,0.5)', 
    justifyContent: 'center', 
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  reportModalContent: { 
    backgroundColor: '#fff', 
    borderRadius: 16, 
    width: '100%',
    maxWidth: 400,
    maxHeight: '80%',
  },
  reportModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  reportModalTitle: { 
    fontSize: 18, 
    fontWeight: '600', 
    color: '#333',
    flex: 1,
  },
  closeButton: {
    padding: 4,
  },
  reportModalBody: {
    paddingHorizontal: 20,
    paddingVertical: 16,
  },
  reportSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
    marginTop: 16,
  },
  reportedMessageContainer: {
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    padding: 12,
    marginBottom: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#ff6b6b',
  },
  reportedMessageText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  reportReasonItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e5e7eb',
    marginBottom: 8,
  },
  selectedReportReason: {
    borderColor: '#00cc66',
    backgroundColor: '#f0fff4',
  },
  reportReasonIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  reportReasonLabel: {
    fontSize: 16,
    color: '#333',
    flex: 1,
  },
  reportDetailsInput: {
    borderWidth: 1,
    borderColor: '#e5e7eb',
    borderRadius: 12,
    padding: 12,
    fontSize: 14,
    height: 80,
    backgroundColor: '#f9fafb',
  },
  characterCount: {
    fontSize: 12,
    color: '#9ca3af',
    textAlign: 'right',
    marginTop: 4,
  },
  reportModalFooter: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingBottom: 20,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 12,
    backgroundColor: '#f8f9fa',
    marginRight: 8,
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666',
  },
  submitButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 12,
    backgroundColor: '#ff6b6b',
    marginLeft: 8,
    alignItems: 'center',
  },
  disabledSubmitButton: {
    backgroundColor: '#d1d5db',
  },
  submitButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
  },
  modalContent: { 
    backgroundColor: '#fff', 
    borderRadius: 16, 
    padding: 20, 
    width: '80%', 
    alignItems: 'center' 
  },
  modalTitle: { 
    fontSize: 18, 
    fontWeight: '600', 
    color: '#333', 
    marginBottom: 16 
  },
  modalCloseButton: { 
    backgroundColor: '#f8f9fa', 
    paddingHorizontal: 24, 
    paddingVertical: 12, 
    borderRadius: 12, 
    marginTop: 16 
  },
  modalCloseButtonText: { 
    fontSize: 16, 
    fontWeight: '600', 
    color: '#333' 
  },
  webView: { 
    width: 0, 
    height: 0, 
    opacity: 0 
  },
});

export default ChatBot;